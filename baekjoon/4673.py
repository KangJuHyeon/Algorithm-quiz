# 문제
# 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 
# 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 
# 예를 들어, d(75) = 75+7+5 = 87이다.
# 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 
# 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 
# 이런식으로 다음과 같은 수열을 만들 수 있다. 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
# n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 
# 생성자가 없는 숫자를 셀프 넘버라고 한다. 
# 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
# 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.

# 입력
# 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.

# 문제 접근 및 이해
# 셀프 넘버란 쉽게말해서 누군가를 더해서 나올 수 없는 수를 뜻한다.
# 예를들어 123이란 수가 있다면 123 + 1 + 2 + 3으로 129가 생성되는데
# 이런식으로 생성될 수 없는 수가 바로 셀프 넘버이다.
# 더 쉽게 예를 들어보자면 10보다 작은 셀프 넘버는 1, 3, 5, 7, 9가 있다.
# 1부터 시작한다고 치면
# 1 + 1 = 2
# 2 + 2 = 4
# 3 + 3 = 6

# 앞에서 부터 자연수를 set 함수를 사용해서 1부터 10000까지 a로 변수설정을 하고
# 생성될 숫자를 b라는 변수로 만들어준다.

# 그 다음 1부터 10000까지 for 반복문을 돌리고 이 반복문 안에 2중 반복문으로
# 입력되는 i를 str(문자열)로 바꿔줘서
# 예를 들어 850이라는 i가 입력될 때 8,5,0 처럼 하나씩하나씩 떼어서 더해줄 수 있도록하고
# 그 안에서 850 + 8 + 5 + 0을 해준 결과인 863을 b 변수에 넣어준다.

# 이렇게 하면 결국 b 변수에는 생성자로 생겨난 수들이 모이게 되고
# 셀프 넘버는 생성자가 없는 숫자(1,3,5,7,9)등이니까
# 전제 자연수(a)에서 생성자가 모인 변수(B)을 빼주면 셀프 넘버만 남게 된다.

a = set(range(1, 10001))
b = set()

for i in range(1, 10001): # i = 850
    # print(i)
    for j in str(i):      # j = "8", "5", "0"
        # print(j)
        i += int(j)       # 850 + 8 + 5 + 0, i = 863
    b.add(i)           # 생성자가 있는 숫자들
print(b)
    
self_num = sorted(a - b)
for i in self_num:
    print(i)